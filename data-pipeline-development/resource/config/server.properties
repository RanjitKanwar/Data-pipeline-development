[S3]
REGION_NAME= us-east-1


[UNICORN_DEFAULT]
user=datapipeline
password=datapipeline@123
account=hxa70623.us-east-1
warehouse=UNICORN_WAREHOUSE_NONPROD
database=UNICORN_DEV
schema=staging
role=LOADER
matadata_schema=METADATA
entity_schema_detail_table=ENTITY_SCHEMA_DETAILS

[SPARK_CONFIG]
spark.app.name=Test
spark.hadoop.fs.s3a.impl = org.apache.hadoop.fs.s3a.S3AFileSystem
spark.sql.execution.arrow.pyspark.enabled = true
spark.driver.maxResultSize = 4g
mapreduce.fileoutputcommitter.marksuccessfuljobs = false
parquet.enable.summary-metadata = false
fs.s3a.buffer.dir = /tmp

[MYSQL_METASTOTE]
host = 10.29.64.76
port = 13221
user=cftdba
password=Unicornmetastore4321
database=unicorn_metastore

[METADATA]
env=dev
max_thread_count=5
entity_process_execution_mapping_table=entity_process_execution_mapping
process_inprogess_progess_status_sql = update unicorn_metastore.process_execution set status ='{0}',process_start_dt=now(), updated_dt=now(), updated_by='dataPipeLine' where id={1}
update_process_status_sql = update unicorn_metastore.process_execution set status ='{0}',process_end_dt=now(),updated_dt=now(), updated_by='dataPipeLine' where id={1}

update_job_inprogess_status_sql = update unicorn_metastore.jobs_execution set Jobs_status ='{0}' ,jobs_start_dt =now() , updated_dt=now(), updated_by='dataPipeLine' where id={1}
update_job_status_sql = update unicorn_metastore.jobs_execution set Jobs_status ='{0}' ,jobs_end_dt =now() , updated_dt=now(), updated_by='dataPipeLine' where id={1}

get_job_metadata_sql = select distinct j.id as job_id,j.name as job_name,lower(jecp.name)  as param_key ,replace(replace (IFNULL(jp.param_value ,jecp.default_param_value),'<application>',a.name),'<subscriber>',s.name) as param_value,jecp.is_mandatory
					from jobs_execution_class jec  join jobs j
					on j.jobs_execution_class_id =jec.id
					join jobs_execution_class_param jecp
					on jecp.jobs_execution_class_id =jec.id
					join process_jobs_mapping pjm  on pjm.jobs_id =j.id
					join process p on p.id=pjm.process_id
					join subsriber s on s.id=p.subsriber_id
					join applications a on a.id=p.applications_id
					left join jobs_parameter jp
					on jp.jobs_id =j.id  and jp.jobs_execution_class_param_id  =jecp.id
					where pjm.process_id={0}
proc_generate_process_execution_id_sql = unicorn_metastore.generate_process_execution_id
proc_get_subsriber_application_name_sql = unicorn_metastore.get_subsriber_application_name
ready_job_count_sql = select id as  job_execution_id, process_execution_id, Jobs_id as job_id, job_name,execution_class ,Jobs_status as job_status ,
              count(parent_Job_status) as parent_jobs_total_count,
              IFNULL(case when parent_Job_status='S' then count(parent_Job_status) end,0) as parent_jobs_success_count ,
              IFNULL(case when parent_Job_status='F' then count(parent_Job_status) end ,0)as parent_jobs_failed_count ,
              IFNULL(case when parent_Job_status='R' then count(parent_Job_status) end ,0)as parent_jobs_ready_count ,
              IFNULL(case when parent_Job_status='I' then count(parent_Job_status) end ,0)as parent_jobs_inprogess_count
              from (
              select je.*,j.name as job_name,jec.name as execution_class ,je1.Job_status as  parent_Job_status
              from jobs_execution je
              join jobs j on j.id=je.Jobs_id
              join jobs_execution_class jec  on j.jobs_execution_class_id=jec.id
              join process_jobs_mapping  pjm
              on  je.Jobs_id =pjm.Jobs_id
              left join (  SELECT distinct Jobs_id,
              first_value(jobs_status) over (partition by jobs_id order by id desc ) as job_status
              FROM jobs_execution where process_execution_id={0}) je1 on  je1.Jobs_id =pjm.parent_Jobs_id
              where je.Jobs_status='R' ) v
              group by id, process_execution_id, Jobs_id,job_name,execution_class , Jobs_status

generate_history_entity_list_sql = select distinct entity as entity from unicorn_metastore.entity_process_execution_mapping where process_execution_id={0}
timeline_entity_list_sql=SELECT DISTINCT tce.ENTITY AS entity FROM timeline.TIMELINE_CONFIGURATION_ENTITY  tce
													JOIN timeline.TIMELINE_CONFIGURATION_ENTITY_NARRATIONS tcen ON tce.ENTITY =tcen.ENTITY
													JOIN timeline.TIMELINE_CONFIGURATION_ENTITY_FIELDS tcef ON tce.ENTITY =tcef.ENTITY
													WHERE tce.STATUS ='Enabled'
